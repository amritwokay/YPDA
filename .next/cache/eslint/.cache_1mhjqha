[{"C:\\Users\\rvigneshwari\\amplify-app\\pages\\api\\sql-to-human.ts":"1","C:\\Users\\rvigneshwari\\amplify-app\\pages\\api\\translate.ts":"2","C:\\Users\\rvigneshwari\\amplify-app\\pages\\index.tsx":"3","C:\\Users\\rvigneshwari\\amplify-app\\pages\\_app.tsx":"4","C:\\Users\\rvigneshwari\\amplify-app\\pages\\_document.tsx":"5","C:\\Users\\rvigneshwari\\amplify-app\\components\\Header\\Fork.tsx":"6","C:\\Users\\rvigneshwari\\amplify-app\\components\\Header\\Header.tsx":"7","C:\\Users\\rvigneshwari\\amplify-app\\components\\Header\\Star.tsx":"8","C:\\Users\\rvigneshwari\\amplify-app\\components\\LoadingDots.tsx":"9","C:\\Users\\rvigneshwari\\amplify-app\\components\\ThemeButton.tsx":"10","C:\\Users\\rvigneshwari\\amplify-app\\components\\Toggle.tsx":"11","C:\\Users\\rvigneshwari\\amplify-app\\src\\App.js":"12","C:\\Users\\rvigneshwari\\amplify-app\\src\\App.test.js":"13","C:\\Users\\rvigneshwari\\amplify-app\\src\\aws-exports.js":"14","C:\\Users\\rvigneshwari\\amplify-app\\src\\index.js":"15","C:\\Users\\rvigneshwari\\amplify-app\\src\\reportWebVitals.js":"16","C:\\Users\\rvigneshwari\\amplify-app\\src\\setupTests.js":"17","C:\\Users\\rvigneshwari\\amplify-app\\src\\translateToHuman.js":"18","C:\\Users\\rvigneshwari\\amplify-app\\src\\translateToSQL.js":"19","C:\\Users\\rvigneshwari\\amplify-app\\components\\Logo.tsx":"20","C:\\Users\\rvigneshwari\\amplify-app\\components\\LogoDark.tsx":"21"},{"size":824,"mtime":1687500084428,"results":"22","hashOfConfig":"23"},{"size":760,"mtime":1687891829147,"results":"24","hashOfConfig":"23"},{"size":19257,"mtime":1689340478094,"results":"25","hashOfConfig":"23"},{"size":6027,"mtime":1689353700316,"results":"26","hashOfConfig":"23"},{"size":908,"mtime":1687883126355,"results":"27","hashOfConfig":"23"},{"size":686,"mtime":1687500084413,"results":"28","hashOfConfig":"23"},{"size":1148,"mtime":1689341675759,"results":"29","hashOfConfig":"23"},{"size":810,"mtime":1687500084414,"results":"30","hashOfConfig":"23"},{"size":469,"mtime":1687500084415,"results":"31","hashOfConfig":"23"},{"size":934,"mtime":1689267829002,"results":"32","hashOfConfig":"23"},{"size":1258,"mtime":1687500084417,"results":"33","hashOfConfig":"23"},{"size":1021,"mtime":1687764094668,"results":"34","hashOfConfig":"23"},{"size":254,"mtime":1687259194881,"results":"35","hashOfConfig":"23"},{"size":963,"mtime":1688643674975,"results":"36","hashOfConfig":"23"},{"size":552,"mtime":1687259194887,"results":"37","hashOfConfig":"23"},{"size":375,"mtime":1687259194893,"results":"38","hashOfConfig":"23"},{"size":246,"mtime":1687259194896,"results":"39","hashOfConfig":"23"},{"size":894,"mtime":1687516060654,"results":"40","hashOfConfig":"23"},{"size":1058,"mtime":1689236004852,"results":"41","hashOfConfig":"23"},{"size":4350,"mtime":1689321176428,"results":"42","hashOfConfig":"23"},{"size":4681,"mtime":1688383264890,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","suppressedMessages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1q3lj3k",{"filePath":"47","messages":"48","suppressedMessages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","suppressedMessages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53"},{"filePath":"54","messages":"55","suppressedMessages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"57","messages":"58","suppressedMessages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","suppressedMessages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"63","messages":"64","suppressedMessages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66"},{"filePath":"67","messages":"68","suppressedMessages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"70","messages":"71","suppressedMessages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73"},{"filePath":"74","messages":"75","suppressedMessages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"77","messages":"78","suppressedMessages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"80","messages":"81","suppressedMessages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83"},{"filePath":"84","messages":"85","suppressedMessages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"87","messages":"88","suppressedMessages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"90","messages":"91","suppressedMessages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"93","messages":"94","suppressedMessages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"96","messages":"97","suppressedMessages":"98","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"99","messages":"100","suppressedMessages":"101","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"102","messages":"103","suppressedMessages":"104","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"105","messages":"106","suppressedMessages":"107","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"108","messages":"109","suppressedMessages":"110","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\rvigneshwari\\amplify-app\\pages\\api\\sql-to-human.ts",[],[],"C:\\Users\\rvigneshwari\\amplify-app\\pages\\api\\translate.ts",[],[],"C:\\Users\\rvigneshwari\\amplify-app\\pages\\index.tsx",["111","112","113","114","115","116","117","118","119","120"],[],"import React, { useEffect, useState } from \"react\";\r\nimport dynamic from \"next/dynamic\";\r\nimport { vs, dracula } from \"react-syntax-highlighter/dist/cjs/styles/hljs\";\r\nimport Head from \"next/head\";\r\nimport { Analytics } from \"@vercel/analytics/react\";\r\nimport ThemeButton from \"../components/ThemeButton\";\r\nimport { useTranslate } from \"../hooks/useTranslate\";\r\nimport { toast } from \"react-hot-toast\";\r\nimport LoadingDots from \"../components/LoadingDots\";\r\nimport { useTheme } from \"next-themes\";\r\nimport Toggle from \"../components/Toggle\";\r\nimport { Header } from \"../components/Header/Header\";\r\n\r\ninterface TableRowData {\r\n  [key: string]: {\r\n    S: string;\r\n  };\r\n}\r\ninterface TableData {\r\n  [key: string]: TableRowData;\r\n}\r\ninterface Props {\r\n  jsonText: string;\r\n}\r\nconst JSONTable: React.FC<Props> = ({ jsonText }) => {\r\n  const data: TableData[] = JSON.parse(jsonText);\r\n  const getHeaders = (): string[] => {\r\n    if (data.length === 0) return [];\r\n    return Object.keys(data[0]);\r\n  };\r\n  const getRows = (): JSX.Element[] => {\r\n    return data.map((rowData, index) => {\r\n      const rowId = `row-${index}`;\r\n      const columns = Object.entries(rowData);\r\n      return (\r\n        <tr key={rowId}>\r\n          {columns.map(([columnKey, columnData]) => {\r\n            const columnId = `column-${columnKey}`;\r\n            const value = columnData.S;\r\n            return <td key={columnId}>{String(value)}</td>;\r\n          })}\r\n        </tr>\r\n      );\r\n    });\r\n  };\r\n  return (\r\n    <table className=\"border-collapse border border-gray-300\">\r\n      <thead>\r\n        <tr>\r\n          {getHeaders().map((header, index) => (\r\n            <th key={index} className=\"border border-gray-300 p-2\">{header}</th>\r\n          ))}\r\n        </tr>\r\n      </thead>\r\n      <tbody>{getRows().map((row, index) => (\r\n        <tr key={index}>\r\n          {row.props.children.map((cell: { props: { children: string | number | boolean | React.ReactElement<any, string | React.JSXElementConstructor<any>> | React.ReactFragment | React.ReactPortal | null | undefined; }; }, index: React.Key | null | undefined) => (\r\n            <td key={index} className=\"border border-gray-300 p-2\">\r\n              {cell.props.children}\r\n            </td>\r\n          ))}\r\n        </tr>\r\n      ))}</tbody>\r\n    </table>\r\n  );}\r\n\r\nconst SyntaxHighlighter = dynamic(() => import(\"react-syntax-highlighter\"));\r\n\r\ninterface IHistory {\r\n  inputText: string;\r\n  outputText: string;\r\n  tableSchema?: string;\r\n  isHumanToSql?: boolean;\r\n}\r\n\r\ninterface IHistoryEntry {\r\n  inputText: string;\r\n  outputText: string;\r\n  tableSchema?: string;\r\n  isHumanToSql?: boolean;\r\n}\r\n\r\ninterface ITextCopied {\r\n  isCopied: boolean;\r\n  isHistory: boolean;\r\n  text: string;\r\n}\r\ninterface prev{\r\n  previnput: string;\r\n  prevoutput: string;\r\n}\r\n\r\nexport default function Home() {\r\n  \r\n  const { resolvedTheme } = useTheme();\r\n  const isThemeDark = resolvedTheme === \"dark\";\r\n  const [mounted, setMounted] = useState(false);\r\n  const {\r\n    translate,\r\n    translating,\r\n    outputText,\r\n    setOutputText,\r\n    translationError,\r\n  } = useTranslate();\r\n  const [inputText, setInputText] = useState(\"\");\r\n  const [prevquery, setPrevquery] = useState<prev[]>([]);\r\n  const [isHumanToSql, setIsHumanToSql] = useState(true);\r\n  const [isOutputTextUpperCase, setIsOutputTextUpperCase] = useState(false);\r\n  const [tableSchema, setTableSchema] = useState(\"\");\r\n  const [showTableSchema, setShowTableSchema] = useState(false);\r\n  const [history, setHistory] = useState<IHistory[]>([]);\r\n  const [showHistory, setShowHistory] = useState(false);\r\n  const [hasTranslated, setHasTranslated] = useState(false);\r\n  const [copied, setCopied] = useState<ITextCopied>();\r\n\r\n  useEffect(() => {\r\n    if (inputText && hasTranslated) {\r\n      setHistory((prevHistory) => [\r\n        ...prevHistory,\r\n        {\r\n          inputText: JSON.stringify(inputText),\r\n          outputText: JSON.stringify(outputText),\r\n          tableSchema,\r\n          isHumanToSql,\r\n        },\r\n      ]);\r\n\r\n      addHistoryEntry({\r\n        inputText: JSON.stringify(inputText),\r\n        tableSchema,\r\n        isHumanToSql,\r\n        outputText: JSON.stringify(outputText),\r\n      });\r\n\r\n      setHasTranslated(false);\r\n    }\r\n  }, [outputText]);\r\n\r\n  useEffect(() => {\r\n    setMounted(true);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (translationError) toast.error(translationError);\r\n  }, [translationError]);\r\n\r\n  if (!mounted) {\r\n    return null;\r\n  }\r\n\r\n  const isValidTableSchema = (text: string) => {\r\n    const pattern = /^CREATE\\s+TABLE\\s+\\w+\\s*\\((\\s*.+\\s*,?\\s*)+\\);?$/i;\r\n    const regex = new RegExp(pattern);\r\n      return regex.test(text.trim());\r\n  };\r\n\r\n  const addHistoryEntry = (entry: IHistory) => {\r\n    if (\r\n      !history.some(\r\n        ({ inputText, outputText }) =>\r\n          inputText === entry.inputText && outputText === entry.outputText\r\n      ) &&\r\n      !prevquery.some(\r\n        ({ previnput, prevoutput }) =>\r\n          previnput === entry.inputText && prevoutput === entry.outputText\r\n      )\r\n    ) {\r\n      setHistory([...history, entry]);\r\n      \r\n    }\r\n    const newhistory: prev = {previnput : entry.inputText, prevoutput : entry.outputText};\r\n    setPrevquery([...prevquery,newhistory]);\r\n    \r\n  };\r\n\r\n  function safeJSONParse(str: string) {\r\n    try {\r\n      return JSON.parse(str);\r\n    } catch (e) {\r\n      console.error(\"JSON parse error:\", e);\r\n      return null;\r\n    }\r\n  }\r\n\r\n  const handleInputChange = (event: React.ChangeEvent<HTMLTextAreaElement>) => {\r\n    setInputText(event.target.value);\r\n    if (!showTableSchema) {\r\n      setTableSchema(\"CREATE TABLE superstore (RowID INT,OrderID INT,OrderDate DATE,ShipDate DATE,ShipMode VARCHAR(255),CustomerID INT,CustomerName VARCHAR(255),Segment VARCHAR(255),Country VARCHAR(255),City VARCHAR(255),State VARCHAR(255),PostalCode VARCHAR(255),Region VARCHAR(255),ProductID INT,Category VARCHAR(255),SubCategory VARCHAR(255),Sales DECIMAL(10, 2),Quantity INT,Discount DECIMAL(5, 2),Profit DECIMAL(10, 2));\");\r\n    }\r\n  };\r\n\r\n  const handleCopy = (text: string, isHistory: boolean) => {\r\n    navigator.clipboard.writeText(text);\r\n    setCopied({\r\n      isCopied: true,\r\n      isHistory: isHistory,\r\n      text: text\r\n    })\r\n     setTimeout(() => {\r\n      setCopied({\r\n        isCopied: false,\r\n        isHistory: isHistory,\r\n        text: text\r\n      }) \r\n    }, 3000);\r\n  };\r\n\r\n  const buttonStyles = {\r\n    light: \"light-button-w-gradient-border text-black\",\r\n    dark: \"dark-button-w-gradient-border text-[#D8D8D8]\",\r\n  };\r\n\r\n  const handleSubmit = async (event: React.FormEvent) => {\r\n    event.preventDefault();\r\n\r\n    try {\r\n      // Validate input syntax\r\n      if (!isHumanToSql) {\r\n        const pattern =\r\n          /^\\s*(select|insert|update|delete|create|alter|drop|truncate|grant|revoke|use|begin|commit|rollback)\\s/i;\r\n        const regex = new RegExp(pattern);\r\n        if (!regex.test(inputText)) {\r\n          toast.error(\"Invalid SQL syntax.\");\r\n          return;\r\n        }\r\n      }\r\n      if (showTableSchema && !isValidTableSchema(tableSchema)) {\r\n        toast.error(\"Invalid table schema.\");\r\n        return;\r\n      }\r\n\r\n      translate({ inputText, tableSchema, isHumanToSql });\r\n      setHasTranslated(true);\r\n    } catch (error) {\r\n      console.log(error);\r\n      toast.error(`Error translating ${isHumanToSql ? \"to SQL\" : \"to human\"}.`);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Header />\r\n      <ThemeButton className=\"absolute top-2.5 left-2.5 text-gray-500 dark:text-gray-400 focus:outline-none hover:scale-125 transition\" />\r\n      \r\n      <div className=\"flex flex-col md:flex-row w-full gap-6 bg-[#EEEEEE] dark:text-white dark:bg-black dark:border dark:border-white/20 rounded-2xl p-2\">\r\n        <div className=\"w-full\" >\r\n          <form\r\n            onSubmit={(event) => handleSubmit(event)}\r\n            className=\"rounded-xl bg-white border dark:border-gray-800 dark:bg-custom-gray shadow-md p-6 w-full h-full\"\r\n          >\r\n            <div className=\"flex flex-col h-full\">\r\n              <label\r\n                htmlFor=\"inputText\"\r\n                className=\"block font-medium mb-2 text-gray-700 dark:text-gray-200\"\r\n              >\r\n                {isHumanToSql ? \"Ask Me\" : \"SQL\"}\r\n              </label>\r\n              <textarea\r\n                className={`appearance-none border-0 rounded-lg w-full py-2 px-3 bg-custom-gray-bg dark:bg-custom-dark-gray text-gray-700 dark:text-white leading-tight focus:outline-none focus:shadow-outline ${\r\n                  isThemeDark ? \"placeholder-dark\" : \"\"\r\n                }`}\r\n                id=\"inputText\"\r\n                rows={3}\r\n                placeholder={\r\n                  isHumanToSql\r\n                    ? \"e.g. show me the profits for year 2015\"\r\n                    : \"SELECT * FROM cars WHERE color = 'red'\"\r\n                }\r\n                value={inputText}\r\n                onChange={handleInputChange}\r\n                onKeyDown={(event) => {\r\n                  if (\r\n                    event.key === \"Enter\" &&\r\n                    (event.metaKey || event.ctrlKey)\r\n                  ) {\r\n                    handleSubmit(event);\r\n                  }\r\n                }}\r\n                required\r\n              />\r\n              {tableSchema && showTableSchema && (\r\n                <div className=\"mt-4\">\r\n                  <h2 className=\"mb-2 font-medium text-sm text-gray-500 dark:text-white\">\r\n                    Table Schema\r\n                  </h2>\r\n                  <SyntaxHighlighter\r\n                    language=\"sql\"\r\n                    style={isThemeDark ? dracula : vs}\r\n                    wrapLines={true}\r\n                    showLineNumbers={true}\r\n                    lineNumberStyle={{ color: isThemeDark ? \"gray\" : \"#ccc\" }}\r\n                    customStyle={{\r\n                      maxHeight: \"none\",\r\n                      height: \"auto\",\r\n                      overflow: \"visible\",\r\n                      wordWrap: \"break-word\",\r\n                      color: \"inherit\",\r\n                      backgroundColor: isThemeDark ? \"#1D1D1D\" : \"#F8F8F8\",\r\n                      borderRadius: \"0.5rem\",\r\n                    }}\r\n                    lineProps={{ style: { whiteSpace: \"pre-wrap\" } }}\r\n                  >\r\n                    {tableSchema}\r\n                  </SyntaxHighlighter>\r\n                </div>\r\n              )}\r\n\r\n              <div className=\"flex items-center justify-between my-3 last:mb-0 space-x-10\">\r\n                {isHumanToSql && (\r\n                  <button\r\n                    type='button'\r\n                    className={`rounded-full flex items-center justify-center space-x-4 border text-sm font-medium px-4 py-2 [text-shadow:0_0_1px_rgba(0,0,0,0.25)] ${\r\n                      resolvedTheme === \"light\"\r\n                        ? buttonStyles.light\r\n                        : buttonStyles.dark\r\n                    }`}\r\n                    onClick={() => {\r\n                      setShowTableSchema(!showTableSchema);\r\n                      if (!showTableSchema) {\r\n                        setTableSchema(\"CREATE TABLE superstore (RowID INT,OrderID INT,OrderDate DATE,ShipDate DATE,ShipMode VARCHAR(255),CustomerID INT,CustomerName VARCHAR(255),Segment VARCHAR(255),Country VARCHAR(255),City VARCHAR(255),State VARCHAR(255),PostalCode VARCHAR(255),Region VARCHAR(255),ProductID INT,Category VARCHAR(255),SubCategory VARCHAR(255),Sales DECIMAL(10, 2),Quantity INT,Discount DECIMAL(5, 2),Profit DECIMAL(10, 2));\");\r\n                      }\r\n                    }}\r\n                  >\r\n                    {showTableSchema ? \"Hide Schema\" : \"View Schema\"}\r\n                  </button>\r\n                )}\r\n\r\n                <button\r\n                  type=\"submit\"\r\n                  className={`cursor-pointer py-2 px-4y rounded-full blue-button-w-gradient-border [text-shadow:0_0_1px_rgba(0,0,0,0.25)] shadow-2xl flex flex-row items-center justify-start ${\r\n                    translating && \"opacity-50 pointer-events-none\"\r\n                  }`}\r\n                  disabled={translating}\r\n                >\r\n                  <img src=\"/stars.svg\"></img>&nbsp;\r\n                  <div className=\"relative text-sm font-semibold font-inter text-white text-center inline-block mx-auto\">\r\n                    {translating ? (\r\n                      <>\r\n                        Retrieveing Data\r\n                        <LoadingDots color=\"white\" />\r\n                      </>\r\n                    ) : (\r\n                      `Generate Result`\r\n                    )}\r\n                  </div>\r\n                </button>\r\n              </div>\r\n\r\n              {isHumanToSql && showTableSchema && (\r\n                <div className=\"flex flex-col mt-2\">\r\n                  <label\r\n                    htmlFor=\"tableSchema\"\r\n                    className=\"block mb-2 text-sm font-medium text-gray-500 dark:text-white\"\r\n                  >\r\n                    Table Schema Input\r\n                  </label>\r\n                  <textarea\r\n                    className={`appearance-none border-0 rounded-lg w-full py-2 px-3 bg-custom-gray-bg dark:bg-custom-dark-gray text-gray-700 dark:text-white leading-tight focus:outline-none focus:shadow-outline ${\r\n                      isThemeDark ? \"placeholder-dark\" : \"\"\r\n                    }`}\r\n                    id=\"tableSchema\"\r\n                    rows={3}\r\n                    //placeholder=\"e.g. CREATE TABLE cars (id INT, make TEXT, model TEXT, year INT, color TEXT)\"\r\n                    value={tableSchema}\r\n                    autoFocus\r\n                    onChange={(event) => setTableSchema(event.target.value)}\r\n                    onBlur={() => {\r\n                      if (!showTableSchema) {\r\n                        setTableSchema(\"CREATE TABLE superstore (RowID INT,OrderID INT,OrderDate DATE,ShipDate DATE,ShipMode VARCHAR(255),CustomerID INT,CustomerName VARCHAR(255),Segment VARCHAR(255),Country VARCHAR(255),City VARCHAR(255),State VARCHAR(255),PostalCode VARCHAR(255),Region VARCHAR(255),ProductID INT,Category VARCHAR(255),SubCategory VARCHAR(255),Sales DECIMAL(10, 2),Quantity INT,Discount DECIMAL(5, 2),Profit DECIMAL(10, 2));\");\r\n                      }\r\n                    }}\r\n                  />\r\n                </div>\r\n              )}\r\n            </div>\r\n          </form>\r\n        </div>\r\n        <div className=\"w-full\">\r\n          <div className=\"rounded-xl bg-white border dark:border-gray-800 dark:bg-custom-gray shadow-md p-6 w-full h-full\" style={{ width: '100%' }}>\r\n            <div className=\"flex flex-col flex-1\">\r\n              <label\r\n                htmlFor=\"Result\"\r\n                className=\"block font-medium mb-2 text-gray-700 dark:text-gray-200\"\r\n              >\r\n                Dataset Description\r\n              </label>\r\n              <div\r\n                className={`${\r\n                isThemeDark ? \"text-white\" : \"text-black\"\r\n                } whitespace-pre-wrap`}\r\n                >\r\n                  You are “interacting” with Superstore dataset (from 2014-2017) to gain insights on the sales and Profit & Loss associated with products spanning across different regions and customer segments in US.\r\n              </div>\r\n              <div>Click on \"View Schema\" to get an overview about the definition of the dataset to frame your questions in natural language </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      {history.length > 0 && (\r\n        <button\r\n          className={`rounded-full flex items-center justify-center space-x-4 border text-sm font-medium mt-2 mb-2 px-4 py-2 [text-shadow:0_0_1px_rgba(0,0,0,0.25)] ${\r\n            resolvedTheme === \"light\" ? buttonStyles.light : buttonStyles.dark\r\n          }`}\r\n          onClick={() => setShowHistory(!showHistory)}\r\n        >\r\n          {showHistory ? \"Hide Result\" : \"Show Result\"}\r\n        </button>\r\n      )}\r\n\r\n      {showHistory && (\r\n        <>\r\n          {history.length > 0 && \r\n           [...history].reverse().map((entry: IHistoryEntry, index: number) => (\r\n              <div key={index} className=\"w-full mb-6\">\r\n                <div className=\"flex flex-col md:flex-row w-full gap-6 bg-custom-background bg-gray-100 dark:bg-black dark:border-gray-800 border rounded-3xl from-blue-500 p-3\">\r\n                  <div className=\"w-full\">\r\n                    <div className=\"rounded-xl bg-white border dark:border-gray-800 dark:bg-custom-gray shadow-md p-6 w-full h-full\">\r\n                      <label\r\n                        htmlFor=\"inputText\"\r\n                        className=\"block mb-2 text-gray-300\"\r\n                      >\r\n                        {entry.isHumanToSql ? \"Your Input\" : \"SQL\"}\r\n                      </label>\r\n                      {entry.isHumanToSql ? (\r\n                        <div\r\n                          className={`${\r\n                            isThemeDark ? \"text-white\" : \"text-black\"\r\n                          } whitespace-pre-wrap`}\r\n                        >\r\n                          {safeJSONParse(entry?.inputText)}\r\n                        </div>\r\n                      ) : (\r\n                        <SyntaxHighlighter\r\n                          language=\"sql\"\r\n                          style={isThemeDark ? dracula : vs}\r\n                          wrapLines={true}\r\n                          showLineNumbers={true}\r\n                          lineNumberStyle={{\r\n                            color: isThemeDark ? \"gray\" : \"#ccc\",\r\n                          }}\r\n                          customStyle={{\r\n                            minHeight: \"70px\",\r\n                            maxHeight: \"none\",\r\n                            height: \"auto\",\r\n                            overflow: \"visible\",\r\n                            wordWrap: \"break-word\",\r\n                            color: \"inherit\",\r\n                            backgroundColor: isThemeDark\r\n                              ? \"#1D1D1D\"\r\n                              : \"#F8F8F8\",\r\n                          }}\r\n                          lineProps={{ style: { whiteSpace: \"pre-wrap\" } }}\r\n                        >\r\n                          {safeJSONParse(entry?.inputText)}\r\n                        </SyntaxHighlighter>\r\n                      )}\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"w-full md:w-1/2\">\r\n                    <div className=\"rounded-xl bg-white border dark:border-gray-800 dark:bg-custom-gray shadow-md p-6 w-full h-full\" style={{ width: '100%' }}>\r\n                      <div className=\"flex flex-col flex-1\">\r\n                          <div style={{ overflowX: 'auto' }}>\r\n                            <label\r\n                              htmlFor=\"inputText\"\r\n                              className=\"block mb-2 text-gray-300\"\r\n                            >\r\n                              Result\r\n                            </label>\r\n                            <JSONTable jsonText={safeJSONParse(entry?.outputText)} />\r\n                          </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>                \r\n              </div>\r\n            ))}\r\n        </>\r\n      )}\r\n      \r\n      <Analytics />\r\n    </div>\r\n  );\r\n}","C:\\Users\\rvigneshwari\\amplify-app\\pages\\_app.tsx",["121","122","123","124","125","126","127","128","129","130"],[],"C:\\Users\\rvigneshwari\\amplify-app\\pages\\_document.tsx",[],[],"C:\\Users\\rvigneshwari\\amplify-app\\components\\Header\\Fork.tsx",[],[],"C:\\Users\\rvigneshwari\\amplify-app\\components\\Header\\Header.tsx",["131","132","133","134"],[],"import Link from \"next/link\";\r\nimport Github from \"../Logo\";\r\nimport ThemeButton from \"../ThemeButton\";\r\nimport { useTheme } from \"next-themes\";\r\nimport {useAuthenticator} from '@aws-amplify/ui-react';\r\n\r\nexport const Header = ({ className }: { className?: string }) => {\r\n  const { resolvedTheme } = useTheme();\r\n  const { signOut } = useAuthenticator();\r\n  const svgFillColor = resolvedTheme === \"dark\" ? \"#D8D8D8\" : \"black\";\r\n  const btnBgColor =\r\n    resolvedTheme === \"dark\"\r\n      ? \"dark-button-w-gradient-border\"\r\n      : \"light-button-w-gradient-border\";\r\n\r\n  return (\r\n    <header className=\"flex flex-col sm:flex-row sm:justify-between w-full pt-4 pb-8 px-2\">\r\n      <Link href=\"/\" className=\"flex flex-col\">\r\n        <h1 className=\"font-montserrat font-bold sm:text-xl tracking-tight\">DataPrompters</h1>\r\n        <p className=\"font-mono font-bold text-gray-600\">\r\n          Insights Delayed Are Opportunities Decayed\r\n        </p>\r\n      </Link>\r\n      <div className=\"absolute top-2.5 right-2.5\">\r\n        <button onClick={() => signOut()}>\r\n          <b>Sign Out</b>\r\n        </button>\r\n      </div>      \r\n    </header>\r\n  );\r\n};\r\n\r\n","C:\\Users\\rvigneshwari\\amplify-app\\components\\Header\\Star.tsx",[],[],"C:\\Users\\rvigneshwari\\amplify-app\\components\\LoadingDots.tsx",["135"],[],"import styles from \"../styles/loading-dots.module.css\";\r\n\r\nconst LoadingDots = ({\r\n  color = \"#000\",\r\n  style = \"small\",\r\n}: {\r\n  color: string;\r\n  style?: string;\r\n}) => {\r\n  return (\r\n    <span className={style == \"small\" ? styles.loading2 : styles.loading}>\r\n      <span style={{ backgroundColor: color }} />\r\n      <span style={{ backgroundColor: color }} />\r\n      <span style={{ backgroundColor: color }} />\r\n    </span>\r\n  );\r\n};\r\n\r\nexport default LoadingDots;\r\n","C:\\Users\\rvigneshwari\\amplify-app\\components\\ThemeButton.tsx",[],[],"C:\\Users\\rvigneshwari\\amplify-app\\components\\Toggle.tsx",[],[],"C:\\Users\\rvigneshwari\\amplify-app\\src\\App.js",["136"],[],"import React from 'react';\r\nimport './App.css';\r\nimport { Amplify } from 'aws-amplify';\r\nimport awsconfig from './aws-exports';\r\nimport { withAuthenticator, useAuthenticator,components,defaultTheme} from '@aws-amplify/ui-react';\r\nimport '@aws-amplify/ui-react/styles.css'\r\nimport { Auth } from 'aws-amplify';\r\n\r\nAmplify.configure(awsconfig);\r\n\r\nfunction App() {\r\n    const { signOut } = useAuthenticator()\r\n    return (\r\n        <div className=\"App\">\r\n            <header className=\"App-header\">\r\n                <h2>My App Content</h2>\r\n                <button onClick={() => signOut()}>Sign Out</button>\r\n            </header>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default withAuthenticator(App, {\r\n    // Render a sign out button once logged in\r\n    includeGreetings: true,\r\n    // Show only certain components\r\n    authenticatorComponents: [components],\r\n    // display federation/social provider buttons\r\n    //federated: { myFederatedConfig },\r\n    // customize the UI/styling\r\n    theme: { defaultTheme }\r\n  });\r\n  ","C:\\Users\\rvigneshwari\\amplify-app\\src\\App.test.js",[],[],"C:\\Users\\rvigneshwari\\amplify-app\\src\\aws-exports.js",[],[],"C:\\Users\\rvigneshwari\\amplify-app\\src\\index.js",[],[],"C:\\Users\\rvigneshwari\\amplify-app\\src\\reportWebVitals.js",[],[],"C:\\Users\\rvigneshwari\\amplify-app\\src\\setupTests.js",[],[],"C:\\Users\\rvigneshwari\\amplify-app\\src\\translateToHuman.js",[],[],"C:\\Users\\rvigneshwari\\amplify-app\\src\\translateToSQL.js",[],[],"C:\\Users\\rvigneshwari\\amplify-app\\components\\Logo.tsx",[],[],"C:\\Users\\rvigneshwari\\amplify-app\\components\\LogoDark.tsx",[],[],{"ruleId":"137","severity":1,"message":"138","line":4,"column":8,"nodeType":"139","messageId":"140","endLine":4,"endColumn":12},{"ruleId":"137","severity":1,"message":"141","line":11,"column":8,"nodeType":"139","messageId":"140","endLine":11,"endColumn":14},{"ruleId":"137","severity":1,"message":"142","line":102,"column":5,"nodeType":"139","messageId":"140","endLine":102,"endColumn":18},{"ruleId":"137","severity":1,"message":"143","line":107,"column":24,"nodeType":"139","messageId":"140","endLine":107,"endColumn":39},{"ruleId":"137","severity":1,"message":"144","line":108,"column":10,"nodeType":"139","messageId":"140","endLine":108,"endColumn":31},{"ruleId":"137","severity":1,"message":"145","line":108,"column":33,"nodeType":"139","messageId":"140","endLine":108,"endColumn":57},{"ruleId":"137","severity":1,"message":"146","line":114,"column":10,"nodeType":"139","messageId":"140","endLine":114,"endColumn":16},{"ruleId":"147","severity":1,"message":"148","line":137,"column":6,"nodeType":"149","endLine":137,"endColumn":18,"suggestions":"150"},{"ruleId":"137","severity":1,"message":"151","line":192,"column":9,"nodeType":"139","messageId":"140","endLine":192,"endColumn":19},{"ruleId":"152","severity":1,"message":"153","line":335,"column":19,"nodeType":"154","endLine":335,"endColumn":41},{"ruleId":"137","severity":1,"message":"155","line":7,"column":17,"nodeType":"139","messageId":"140","endLine":7,"endColumn":26},{"ruleId":"137","severity":1,"message":"156","line":7,"column":28,"nodeType":"139","messageId":"140","endLine":7,"endColumn":36},{"ruleId":"137","severity":1,"message":"157","line":10,"column":29,"nodeType":"139","messageId":"140","endLine":10,"endColumn":34},{"ruleId":"137","severity":1,"message":"158","line":10,"column":81,"nodeType":"139","messageId":"140","endLine":10,"endColumn":98},{"ruleId":"137","severity":1,"message":"159","line":12,"column":10,"nodeType":"139","messageId":"140","endLine":12,"endColumn":14},{"ruleId":"137","severity":1,"message":"160","line":14,"column":8,"nodeType":"139","messageId":"140","endLine":14,"endColumn":16},{"ruleId":"137","severity":1,"message":"161","line":15,"column":8,"nodeType":"139","messageId":"140","endLine":15,"endColumn":19},{"ruleId":"137","severity":1,"message":"162","line":245,"column":10,"nodeType":"139","messageId":"140","endLine":245,"endColumn":19},{"ruleId":"137","severity":1,"message":"163","line":245,"column":21,"nodeType":"139","messageId":"140","endLine":245,"endColumn":33},{"ruleId":"137","severity":1,"message":"164","line":246,"column":9,"nodeType":"139","messageId":"140","endLine":246,"endColumn":14},{"ruleId":"137","severity":1,"message":"165","line":2,"column":8,"nodeType":"139","messageId":"140","endLine":2,"endColumn":14},{"ruleId":"137","severity":1,"message":"161","line":3,"column":8,"nodeType":"139","messageId":"140","endLine":3,"endColumn":19},{"ruleId":"137","severity":1,"message":"166","line":10,"column":9,"nodeType":"139","messageId":"140","endLine":10,"endColumn":21},{"ruleId":"137","severity":1,"message":"167","line":11,"column":9,"nodeType":"139","messageId":"140","endLine":11,"endColumn":19},{"ruleId":"168","severity":1,"message":"169","line":11,"column":28,"nodeType":"170","messageId":"171","endLine":11,"endColumn":30},{"ruleId":"172","severity":1,"message":"159","line":7,"column":10,"nodeType":"139","messageId":"140","endLine":7,"endColumn":14},"@typescript-eslint/no-unused-vars","'Head' is defined but never used.","Identifier","unusedVar","'Toggle' is defined but never used.","'setOutputText' is assigned a value but never used.","'setIsHumanToSql' is assigned a value but never used.","'isOutputTextUpperCase' is assigned a value but never used.","'setIsOutputTextUpperCase' is assigned a value but never used.","'copied' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'addHistoryEntry', 'hasTranslated', 'inputText', 'isHumanToSql', and 'tableSchema'. Either include them or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setHistory' needs the current value of 'inputText'.","ArrayExpression",["173"],"'handleCopy' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'useEffect' is defined but never used.","'useState' is defined but never used.","'Image' is defined but never used.","'withAuthenticator' is defined but never used.","'Auth' is defined but never used.","'LogoDark' is defined but never used.","'ThemeButton' is defined but never used.","'colorMode' is assigned a value but never used.","'setColorMode' is assigned a value but never used.","'theme' is assigned a value but never used.","'Github' is defined but never used.","'svgFillColor' is assigned a value but never used.","'btnBgColor' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-unused-vars",{"desc":"174","fix":"175"},"Update the dependencies array to be: [addHistoryEntry, hasTranslated, inputText, isHumanToSql, outputText, tableSchema]",{"range":"176","text":"177"},[4227,4239],"[addHistoryEntry, hasTranslated, inputText, isHumanToSql, outputText, tableSchema]"]